{"name":"Fsharp.msisdn","tagline":"Library for working with international telephone numbers in F#","body":"Msisdn is a .NET library that facilitates working with international telephone numbers in F#. It follows the [ITU-T](http://en.wikipedia.org/wiki/ITU-T) recommendation [E.164](http://en.wikipedia.org/wiki/E.164).\r\n\r\nFeatures:\r\n\r\n* Provides a type for representing phone numbers. A value of this type will ALWAYS be a valid phone number (it may not exist, but it will be valid).\r\n* Validates MSISDN strings\r\n* Normalizes MSISDN strings to its canonical representation\r\n* Lets you extract country calling code and country name from Msisdn\r\n\r\n## Install with NuGet\r\n\r\n    PM> Install-Package FSharp.Msisdn\r\n\r\n## Usage\r\n\r\nYou create an Msisdn by providing a string describing the phone number, including country calling code prefix, to the `create` function.\r\n\r\n\t// Create a fictitious Norwegian mobile number\r\n    match Msisdn.create \"4799999999\" with\r\n    | Some msisdn -> doSomethingWith msisdn\r\n    | None -> printfn \"Not a valid MSISDN\"\r\n\r\nNote that you don't have to (actually you're not allowed to) open the Msisdn module. The module will automatically be available everywhere in a project referencing FSharp.Msisdn, but you have to use qualified access.\r\n\r\n## Msisdn module API\r\n\r\n### T\r\n\r\n\ttype T = Msisdn of string\r\n\r\nA single case discriminated union wrapping a phone number string. YOU DON'T NEED TO REFER TO THIS TYPE DIRECTLY, AND SHOULD NOT DO SO.\r\n\r\n### create\r\n\r\n    val create : string -> T option\r\n\r\nCreates an Msisdn option. If s is a valid number, returns `Some Msisdn.T`. If not valid, returns `None`. `null` is never a valid number.\r\n\r\nBy using an option type, `create` forces the caller to handle the case of invalid input, which is a good thing!\r\n\r\n`create` will strip away and ignore certain characters normally found in human representations of phone numbers. These are all valid inputs:\r\n\r\n    \"47 99 99 99 99\"   // spaces are ok\r\n    \"0047 99999999\"    // leading zeros are ok\r\n    \"+47 999-99-999\"   // plus and hyphens are ok\r\n    \"[47](999){99999}\" // brackets are ok\r\n    \"47\\t99999999\\r\\n\" // even tabs and newlines are ok\r\n\r\n### apply\r\n\r\n    val apply : (string -> 'a) -> T -> 'a\r\n\r\nApply function f to the canonical string representation of an Msisdn.\r\n\r\n### value\r\n\r\n    val value : T -> string\r\n\r\nGet the canonical string representation of an Msisdn.\r\n\r\nWhen you retrieve the value from an Msisdn, the canonical string representation is given:\r\n\r\n    Msisdn.create \"0047 (999) 99-999\"\r\n    |> Option.get\r\n    |> Msisdn.value // evaluates to \"4799999999\"\r\n\r\n### isValid\r\n\r\n    val isValid : string -> bool\r\n\r\nChecks if string is a valid input for an Msisdn.\r\nVerification is done for you when you create\r\na new Msisdn using the `create` function.\r\n\r\n### canonicalize\r\n\r\n    val canonicalize : string -> string\r\n\r\nTransforms a valid Msisdn string to its canonical form.\r\nThis is done for you when you create a new Msisdn using\r\nthe `create` function.\r\n\r\n### equals\r\n\r\n    val equals : T -> T -> bool\r\n\r\n### compareTo\r\n\r\n    val compareTo : T -> T -> int\r\n\r\n### countryCode\r\n\r\n    val countryCode : T -> string * string\r\n\r\nGet the country calling code prefix (CC) and the country or destination name\r\nfrom an Msisdn.\r\n\r\n    let cc, description = Msisdn.create \"+4799999999\"\r\n                          |> Option.get\r\n                          |> Msisdn.countryCode\r\n    // val cc = \"47\"\r\n    // val description = \"Norway\"\r\n\r\nCC will always be between 1 and 3 digits. The same CC will in some situations have different descriptions.\r\n\r\n    [\"90 312 213 2965\"\r\n     \"90 392 11111\"]\r\n    |> List.choose Msisdn.create\r\n    |> List.map Msisdn.countryCode\r\n\r\n    // Result:\r\n    // [(\"90\", \"Turkey\")\r\n        (\"90\", \"Northern Cyprus\")]\r\n\r\n## More examples\r\n\r\nThis is how you may use FSharp.Msisdn to get the canonical representation from a list potensially containing some invalid numbers:\r\n\r\n    let numbers = [\"47 91 92 93 94\"\r\n                   \"1-555-32-654\"\r\n                   \"00362347657\"\r\n                   \"+87899877889x\"]\r\n    \r\n    numbers\r\n    |> List.choose Msisdn.create\r\n    |> List.map Msisdn.value\r\n\r\n    // Result:\r\n    // [\"4791929394\"; \"155532654\"; \"362347657\"]\r\n\r\nOf course the same thing can be done using `canonicalize` and `isValid` directly:\r\n\r\n    numbers\r\n    |> List.map Msisdn.canonicalize\r\n    |> List.filter Msisdn.isValid\r\n\r\nIf you need to group your numbers by country code, you could do something like this:\r\n\r\n    numbers\r\n    |> List.choose Msisdn.create\r\n    |> Seq.groupBy \r\n        (fun x -> let cc, _ = Msisdn.countryCode x in cc)\r\n    \r\n    // Result:\r\n    // [(\"47\", seq [Msisdn \"4791929394\"])\r\n    //  (\"1\", seq [Msisdn \"155532654\"])\r\n    //  (\"36\", seq [Msisdn \"362347657\"])]\r\n\r\n\r\n## The MIT License (MIT)\r\n\r\nCopyright (c) 2015 Torbjørn Marø\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}